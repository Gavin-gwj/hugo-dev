<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Redis on Gavin-歌未竟</title>
        <link>https://gavin-gwj.github.io/hugo-dev/categories/redis/</link>
        <description>Recent content in Redis on Gavin-歌未竟</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>歌未竟的个人博客</copyright>
        <lastBuildDate>Thu, 03 Jul 2025 15:05:20 +0800</lastBuildDate><atom:link href="https://gavin-gwj.github.io/hugo-dev/categories/redis/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Spring Cache 入门笔记</title>
        <link>https://gavin-gwj.github.io/hugo-dev/p/spring-cache-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Thu, 03 Jul 2025 15:05:20 +0800</pubDate>
        
        <guid>https://gavin-gwj.github.io/hugo-dev/p/spring-cache-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;h1 id=&#34;spring-cache-入门笔记&#34;&gt;Spring Cache 入门笔记
&lt;/h1&gt;&lt;h2 id=&#34;1-什么是-spring-cache&#34;&gt;1. 什么是 Spring Cache？
&lt;/h2&gt;&lt;p&gt;想象一下，你的应用程序有一个方法，需要从数据库查询一些不经常变化的数据，比如商品分类。每次用户请求这个数据，你的代码都会执行一次数据库查询，如果访问量很大，这会对数据库造成巨大的压力，并且响应速度也会变慢。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spring Cache 就是为了解决这类问题而生的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它是一个基于注解的缓存解决方案，能够将方法的运行结果存储起来（通常是存储在内存或像 Redis 这样的高速缓存数据库中）。当下次用相同的参数再次调用这个方法时，Spring Cache 会直接返回之前存储的结果，而&lt;strong&gt;不会再执行方法体内的代码&lt;/strong&gt;（例如，不会再去查数据库）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;核心思想：&lt;/strong&gt; 用一个简单的注解，为你的 Java 方法添加缓存能力，从而提高应用性能和响应速度。&lt;/p&gt;
&lt;h2 id=&#34;2-核心概念&#34;&gt;2. 核心概念
&lt;/h2&gt;&lt;p&gt;在使用 Spring Cache 之前，你需要理解几个关键概念：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;概念 (英文)&lt;/th&gt;
          &lt;th&gt;概念 (中文)&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;&lt;code&gt;Cache&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;缓存&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;一个存储键值对（Key-Value）的容器。在 Spring Cache 中，它是一个逻辑上的概念，可以对应一个具体的缓存实现（如一个 ConcurrentMap，一个 Redis Hash 等）。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;&lt;code&gt;CacheManager&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;缓存管理器&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;顾名思义，它是用来管理多个 &lt;code&gt;Cache&lt;/code&gt; 实例的。你可以通过它来获取、创建或删除 &lt;code&gt;Cache&lt;/code&gt;。Spring Boot 会根据你的依赖和配置自动配置一个 &lt;code&gt;CacheManager&lt;/code&gt;。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;&lt;code&gt;@EnableCaching&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;开启缓存&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;这是一个开关。在你的 Spring Boot 主启动类或任何配置类上添加这个注解，就代表 &amp;ldquo;我要开始使用 Spring Cache 的功能了！&amp;quot;。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;缓存注解&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;缓存注解&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Spring Cache 的精髓所在。通过在方法上添加不同的注解（如 &lt;code&gt;@Cacheable&lt;/code&gt;, &lt;code&gt;@CachePut&lt;/code&gt;, &lt;code&gt;@CacheEvict&lt;/code&gt;），来告诉 Spring 如何操作缓存。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;导出到 Google 表格&lt;/p&gt;
&lt;h2 id=&#34;3-最核心的三个注解&#34;&gt;3. 最核心的三个注解
&lt;/h2&gt;&lt;p&gt;掌握了下面这三个注解，你就掌握了 Spring Cache 80% 的用法。&lt;/p&gt;
&lt;h3 id=&#34;31-cacheable查询缓存有则返回无则执行并缓存&#34;&gt;3.1 &lt;code&gt;@Cacheable&lt;/code&gt;：查询缓存，有则返回，无则执行并缓存
&lt;/h3&gt;&lt;p&gt;这是最常用，也是最重要的一个注解。它的作用是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在方法执行前，Spring 会根据方法的参数生成一个 &lt;code&gt;Key&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用这个 &lt;code&gt;Key&lt;/code&gt; 去 &lt;code&gt;Cache&lt;/code&gt; 中查找。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;如果找到了&lt;/strong&gt;：直接返回找到的 &lt;code&gt;Value&lt;/code&gt;，方法体内的代码&lt;strong&gt;完全不会执行&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;如果没有找到&lt;/strong&gt;：执行方法体内的代码，获取返回值。然后将 &lt;code&gt;Key-返回值&lt;/code&gt; 这个键值对存入 &lt;code&gt;Cache&lt;/code&gt; 中，最后再返回这个值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：查询操作，尤其是不经常变化的数据查询（比如，根据 ID 查询用户信息、查询商品详情等）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import org.springframework.cache.annotation.Cacheable;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import org.springframework.stereotype.Service;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@Service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;public class UserServiceImpl implements UserService {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    // 模拟数据库查询
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    @Override
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    @Cacheable(cacheNames = &amp;#34;users&amp;#34;, key = &amp;#34;#id&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    public User findUserById(Long id) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        System.out.println(&amp;#34;正在从数据库中查询用户，ID: &amp;#34; + id);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        // 实际的数据库查询逻辑...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        return new User(id, &amp;#34;张三&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;代码解释：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Cacheable(cacheNames = &amp;quot;users&amp;quot;, key = &amp;quot;#id&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cacheNames = &amp;quot;users&amp;quot;&lt;/code&gt;: 指定了要使用的 &lt;code&gt;Cache&lt;/code&gt; 的名字叫做 &amp;ldquo;users&amp;rdquo;。你可以把它想象成数据库中的一张表名。你可以指定多个 &lt;code&gt;cacheNames&lt;/code&gt;，如 &lt;code&gt;{&amp;quot;users&amp;quot;, &amp;quot;customers&amp;quot;}&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;key = &amp;quot;#id&amp;quot;&lt;/code&gt;: 这是缓存的 &lt;code&gt;Key&lt;/code&gt;。这里使用了 Spring Expression Language (SpEL)。&lt;code&gt;#id&lt;/code&gt; 表示使用方法参数中名为 &lt;code&gt;id&lt;/code&gt; 的值作为 Key。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一次调用 &lt;code&gt;findUserById(1L)&lt;/code&gt; 时，控制台会打印 &amp;ldquo;正在从数据库中查询用户&amp;hellip;&amp;quot;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二次调用 &lt;code&gt;findUserById(1L)&lt;/code&gt; 时，控制台&lt;strong&gt;不会&lt;/strong&gt;有任何输出，方法会直接返回上次缓存的结果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用 &lt;code&gt;findUserById(2L)&lt;/code&gt; 时，因为 Key 不同，所以会再次查询数据库。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-cacheput更新缓存每次都执行并刷新缓存&#34;&gt;3.2 &lt;code&gt;@CachePut&lt;/code&gt;：更新缓存，每次都执行，并刷新缓存
&lt;/h3&gt;&lt;p&gt;有时候我们希望更新数据，并确保缓存中的数据也是最新的。这时就用 &lt;code&gt;@CachePut&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;它的作用是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不管缓存中有没有&lt;/strong&gt;，方法体内的代码&lt;strong&gt;总是会执行&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法执行成功后，将生成的 &lt;code&gt;Key-返回值&lt;/code&gt; 存入 &lt;code&gt;Cache&lt;/code&gt; 中。如果该 Key 已存在，则会覆盖原来的值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：更新操作。比如，更新了用户信息后，希望缓存中的用户信息也同步更新。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import org.springframework.cache.annotation.CachePut;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import org.springframework.stereotype.Service;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@Service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;public class UserServiceImpl implements UserService {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    @Override
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    @CachePut(cacheNames = &amp;#34;users&amp;#34;, key = &amp;#34;#user.id&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    public User updateUser(User user) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        System.out.println(&amp;#34;正在更新数据库中的用户，ID: &amp;#34; + user.getId());
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        // 实际的数据库更新逻辑...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        // 必须返回更新后的对象，这个返回值会被放入缓存
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        return user;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;代码解释：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@CachePut(cacheNames = &amp;quot;users&amp;quot;, key = &amp;quot;#user.id&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;key = &amp;quot;#user.id&amp;quot;&lt;/code&gt;: 使用传入的 &lt;code&gt;user&lt;/code&gt; 对象的 &lt;code&gt;id&lt;/code&gt; 属性作为 Key。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每次调用 &lt;code&gt;updateUser(new User(1L, &amp;quot;李四&amp;quot;))&lt;/code&gt; 时，控制台&lt;strong&gt;总是&lt;/strong&gt;会打印 &amp;ldquo;正在更新数据库中的用户&amp;hellip;&amp;quot;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行完毕后，&lt;code&gt;users&lt;/code&gt; 缓存中 Key 为 &lt;code&gt;1L&lt;/code&gt; 的值会被更新为返回的 &lt;code&gt;User&lt;/code&gt; 对象。这样下次 &lt;code&gt;findUserById(1L)&lt;/code&gt; 就能获取到最新的用户信息了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;33-cacheevict删除缓存&#34;&gt;3.3 &lt;code&gt;@CacheEvict&lt;/code&gt;：删除缓存
&lt;/h3&gt;&lt;p&gt;当数据被删除时，我们也应该把缓存中对应的数据清理掉，避免用户获取到脏数据。&lt;/p&gt;
&lt;p&gt;它的作用是：根据指定的 &lt;code&gt;Key&lt;/code&gt;，从 &lt;code&gt;Cache&lt;/code&gt; 中删除对应的条目。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：删除操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import org.springframework.cache.annotation.CacheEvict;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import org.springframework.stereotype.Service;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@Service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;public class UserServiceImpl implements UserService {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    @Override
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    @CacheEvict(cacheNames = &amp;#34;users&amp;#34;, key = &amp;#34;#id&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    public void deleteUser(Long id) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        System.out.println(&amp;#34;正在从数据库中删除用户，ID: &amp;#34; + id);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        // 实际的数据库删除逻辑...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;代码解释：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@CacheEvict(cacheNames = &amp;quot;users&amp;quot;, key = &amp;quot;#id&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;调用 &lt;code&gt;deleteUser(1L)&lt;/code&gt; 后，Spring Cache 会将 &lt;code&gt;users&lt;/code&gt; 缓存中 Key 为 &lt;code&gt;1L&lt;/code&gt; 的数据删除。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;一个有用的属性&lt;/strong&gt;：&lt;code&gt;allEntries = true&lt;/code&gt;。如果设置为 &lt;code&gt;true&lt;/code&gt;，它会清空整个 &lt;code&gt;&amp;quot;users&amp;quot;&lt;/code&gt; 缓存，而不是只删除某个 Key。例如 &lt;code&gt;@CacheEvict(cacheNames = &amp;quot;users&amp;quot;, allEntries = true)&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-如何在-spring-boot-项目中使用&#34;&gt;4. 如何在 Spring Boot 项目中使用
&lt;/h2&gt;&lt;p&gt;在 Spring Boot 中使用 Spring Cache 非常简单，只需三步。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一步：添加依赖&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在你的 &lt;code&gt;pom.xml&lt;/code&gt; 文件中，添加 Spring Cache 的启动器依赖。&lt;/p&gt;
&lt;p&gt;XML&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;dependency&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;artifactId&amp;gt;spring-boot-starter-cache&amp;lt;/artifactId&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/dependency&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;第二步：开启缓存功能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在你的主启动类上添加 &lt;code&gt;@EnableCaching&lt;/code&gt; 注解。&lt;/p&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import org.springframework.boot.SpringApplication;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import org.springframework.boot.autoconfigure.SpringBootApplication;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import org.springframework.cache.annotation.EnableCaching;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@SpringBootApplication
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@EnableCaching // 开启缓存功能
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;public class MyApplication {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    public static void main(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        SpringApplication.run(MyApplication.class, args);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;第三步：在方法上使用注解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就像上面的例子一样，在你的 Service 方法上添加 &lt;code&gt;@Cacheable&lt;/code&gt;, &lt;code&gt;@CachePut&lt;/code&gt;, &lt;code&gt;@CacheEvict&lt;/code&gt; 注解即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;默认的缓存是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你只完成了上面三步，Spring Boot 默认会使用 &lt;code&gt;ConcurrentHashMap&lt;/code&gt;作为缓存。这意味着缓存是存储在&lt;strong&gt;应用程序的内存&lt;/strong&gt;中的。这对于单个应用实例的简单场景是够用的，但有以下缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;应用重启后缓存会全部丢失。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在分布式或集群环境下，每个应用实例都维护自己的缓存，无法共享。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，在生产环境中，我们通常会集成专业的缓存中间件，如 Redis。&lt;/p&gt;
&lt;h2 id=&#34;5-集成-redis作为缓存&#34;&gt;5. 集成 Redis作为缓存
&lt;/h2&gt;&lt;p&gt;将 Spring Cache 的底层实现替换为 Redis 非常流行且简单。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一步：添加 Redis 依赖&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;pom.xml&lt;/code&gt; 中添加 &lt;code&gt;spring-boot-starter-data-redis&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;XML&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;dependency&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;artifactId&amp;gt;spring-boot-starter-data-redis&amp;lt;/artifactId&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/dependency&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;第二步：配置 Redis 连接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;application.properties&lt;/code&gt; 或 &lt;code&gt;application.yml&lt;/code&gt; 文件中配置 Redis 的地址、端口等信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;application.properties&lt;/code&gt; 示例:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Properties&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Redis 服务器地址
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spring.redis.host=127.0.0.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Redis 服务器端口
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spring.redis.port=6379
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 如果有密码
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# spring.redis.password=yourpassword
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;application.yml&lt;/code&gt; 示例:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;YAML&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spring:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  redis:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    host: 127.0.0.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    port: 6379
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    # password: yourpassword
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;完成了！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是的，就这么简单。Spring Boot 的自动配置机制非常强大。当它检测到 Redis 的依赖和配置后，会自动创建并配置一个 &lt;code&gt;RedisCacheManager&lt;/code&gt; 来替代默认的 &lt;code&gt;ConcurrentHashMap&lt;/code&gt; 缓存。&lt;/p&gt;
&lt;p&gt;你的 Java 代码（&lt;code&gt;@Cacheable&lt;/code&gt; 等注解）&lt;strong&gt;完全不需要做任何改动&lt;/strong&gt;。这就是 Spring Cache 设计的优雅之处：业务代码与具体的缓存实现是解耦的。&lt;/p&gt;
&lt;h2 id=&#34;6-高级主题和常用配置&#34;&gt;6. 高级主题和常用配置
&lt;/h2&gt;&lt;h3 id=&#34;61-自定义-key-生成策略&#34;&gt;6.1 自定义 Key 生成策略
&lt;/h3&gt;&lt;p&gt;默认情况下，Key 的生成规则是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果没有参数，Key 是一个 &lt;code&gt;SimpleKey.EMPTY&lt;/code&gt; 常量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果只有一个参数，Key 就是这个参数的实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果有多个参数，Key 是一个包含了所有参数的 &lt;code&gt;SimpleKey&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大多数情况下，使用 SpEL &lt;code&gt;key=&amp;quot;...&amp;quot;&lt;/code&gt; 属性就足够了。但你也可以创建全局的 Key 生成器。&lt;/p&gt;
&lt;h3 id=&#34;62-条件缓存-condition-和-unless&#34;&gt;6.2 条件缓存 &lt;code&gt;condition&lt;/code&gt; 和 &lt;code&gt;unless&lt;/code&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;condition&lt;/code&gt;&lt;/strong&gt;: 在方法执行&lt;strong&gt;前&lt;/strong&gt;判断，只有条件为 &lt;code&gt;true&lt;/code&gt;，才会走缓存逻辑（查询或存入）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;unless&lt;/code&gt;&lt;/strong&gt;: 在方法执行&lt;strong&gt;后&lt;/strong&gt;判断，只有条件为 &lt;code&gt;false&lt;/code&gt;，才会将方法的返回值放入缓存。通常用来过滤掉不希望缓存的结果（比如，返回值为 &lt;code&gt;null&lt;/code&gt;）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// 只有当参数 id 大于 1 时，才使用缓存
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@Cacheable(cacheNames = &amp;#34;users&amp;#34;, key = &amp;#34;#id&amp;#34;, condition = &amp;#34;#id &amp;gt; 1&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;public User findUserById(Long id) { ... }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// 如果查询结果的用户名为 &amp;#34;guest&amp;#34;，则不缓存这个结果
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@Cacheable(cacheNames = &amp;#34;users&amp;#34;, key = &amp;#34;#id&amp;#34;, unless = &amp;#34;#result.username == &amp;#39;guest&amp;#39;&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;public User findUserById(Long id) { ... }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;#result&lt;/code&gt; 是 SpEL 中一个特殊的变量，代表方法的返回值。&lt;/p&gt;
&lt;h3 id=&#34;63-统一配置缓存过期时间-ttl&#34;&gt;6.3 统一配置缓存过期时间 (TTL)
&lt;/h3&gt;&lt;p&gt;在 &lt;code&gt;application.properties&lt;/code&gt; 或 &lt;code&gt;application.yml&lt;/code&gt; 中可以统一配置缓存的过期时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;application.properties&lt;/code&gt; 示例:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Properties&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 全局设置所有缓存的默认过期时间为 10 分钟
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spring.cache.redis.time-to-live=10m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 针对名为 &amp;#34;users&amp;#34; 的缓存，设置其过期时间为 30 分钟
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spring.cache.redis.cache-names=users,products
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spring.cache.redis.initial-cache-configuration.users.time-to-live=30m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spring.cache.redis.initial-cache-configuration.products.time-to-live=1h
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;application.yml&lt;/code&gt; 示例:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;YAML&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spring:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  cache:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    redis:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      time-to-live: 10m # 全局默认10分钟
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      cache-names: users,products
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      initial-cache-configuration:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        users:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          time-to-live: 30m # users缓存30分钟
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        products:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          time-to-live: 1h  # products缓存1小时
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;64-caching-组合注解&#34;&gt;6.4 &lt;code&gt;@Caching&lt;/code&gt; 组合注解
&lt;/h3&gt;&lt;p&gt;如果你想对一个方法应用多个缓存操作，比如同时清除多个缓存，可以使用 &lt;code&gt;@Caching&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@Caching(evict = {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    @CacheEvict(cacheNames = &amp;#34;users&amp;#34;, key = &amp;#34;#user.id&amp;#34;),
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    @CacheEvict(cacheNames = &amp;#34;user-list&amp;#34;, allEntries = true)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;public User updateUser(User user) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    // ... 更新逻辑
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return user;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个例子在更新用户后，既清除了该用户的单条缓存，也清除了一个可能存在的用户列表缓存。&lt;/p&gt;
&lt;h2 id=&#34;7-总结&#34;&gt;7. 总结
&lt;/h2&gt;&lt;p&gt;Spring Cache 是一个非常实用且强大的工具，它通过声明式的方式（注解）将缓存逻辑与业务逻辑解耦，让开发者能更专注于业务本身。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;入门学习路径建议：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;理解核心思想&lt;/strong&gt;：通过缓存减少对慢速资源的访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;掌握三大注解&lt;/strong&gt;：&lt;code&gt;@Cacheable&lt;/code&gt; (查询), &lt;code&gt;@CachePut&lt;/code&gt; (更新), &lt;code&gt;@CacheEvict&lt;/code&gt; (删除)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实践操作&lt;/strong&gt;：在 Spring Boot项目中，通过引入依赖、开启注解、配置 &lt;code&gt;application.yml&lt;/code&gt; 来集成 Redis。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;深入学习&lt;/strong&gt;：探索 &lt;code&gt;key&lt;/code&gt; 的 SpEL 写法、&lt;code&gt;condition&lt;/code&gt;/&lt;code&gt;unless&lt;/code&gt; 条件缓存以及统一的过期时间配置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Redis五种常用数据类型</title>
        <link>https://gavin-gwj.github.io/hugo-dev/p/redis%E4%BA%94%E7%A7%8D%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
        <pubDate>Thu, 19 Jun 2025 22:26:09 +0800</pubDate>
        
        <guid>https://gavin-gwj.github.io/hugo-dev/p/redis%E4%BA%94%E7%A7%8D%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
        <description>&lt;p&gt;Redis 是一个开源的内存数据结构存储，可以用作数据库、缓存和消息中间件。与传统的关系型数据库不同，Redis 将数据存储在内存中，这使得它的读写速度非常快。它支持多种数据结构，这让它在处理各种场景时都非常灵活。&lt;/p&gt;
&lt;p&gt;下面我们来深入了解 Redis 最常用的五种数据类型：&lt;/p&gt;
&lt;h3 id=&#34;1-字符串-string&#34;&gt;1. 字符串 (String)
&lt;/h3&gt;&lt;p&gt;Redis 中最基本的数据类型就是 &lt;strong&gt;字符串 (String)&lt;/strong&gt;。它不仅仅能存储普通的文本字符串，还能存储二进制数据（比如图片、视频、序列化的 Java 对象），最大可以达到 512MB。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;理解：&lt;/strong&gt; 你可以把 Redis 的 String 类型想象成 Java 中的 &lt;code&gt;String&lt;/code&gt; 类型，但它还能存储更广泛的数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用场景：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;缓存：&lt;/strong&gt; 存储用户的 Session 信息、热门文章的标题等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;计数器：&lt;/strong&gt; 记录网站的访问量、商品的点赞数等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简单键值对：&lt;/strong&gt; 存储配置信息、用户信息等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;常用命令：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SET key value&lt;/code&gt;：设置键值对。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET key&lt;/code&gt;：获取键的值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INCR key&lt;/code&gt;：将键的值加 1（如果值为数字）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DECR key&lt;/code&gt;：将键的值减 1。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EXPIRE key seconds&lt;/code&gt;：设置键的过期时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SET username &amp;#34;zhangsan&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GET username  // 返回 &amp;#34;zhangsan&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SET page_views 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INCR page_views // 返回 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INCR page_views // 返回 2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SET product:1001:name &amp;#34;MacBook Pro&amp;#34; EXPIRE 60 // 设置键值并使其在60秒后过期
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;2-哈希-hash&#34;&gt;2. 哈希 (Hash)
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;哈希 (Hash)&lt;/strong&gt; 类型用于存储对象。它是一个键值对的集合，其中每个键都关联一个值。你可以把它理解为 Java 中的 &lt;code&gt;HashMap&amp;lt;String, String&amp;gt;&lt;/code&gt;，在一个 Redis 的 key 下，又可以存储多个字段和值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;理解：&lt;/strong&gt; 如果你需要在 Redis 中存储一个 Java 对象（比如用户信息），那么 Hash 类型是最好的选择。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用场景：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;存储对象：&lt;/strong&gt; 存储用户信息（姓名、年龄、邮箱等）、商品信息等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;购物车：&lt;/strong&gt; 存储用户购物车中的商品及其数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;常用命令：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HSET key field value&lt;/code&gt;：设置哈希表中指定字段的值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HGET key field&lt;/code&gt;：获取哈希表中指定字段的值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HGETALL key&lt;/code&gt;：获取哈希表中所有字段和值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HDEL key field1 [field2...]&lt;/code&gt;：删除哈希表中的一个或多个字段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HSET user:1001 name &amp;#34;lisi&amp;#34; age 30 email &amp;#34;lisi@example.com&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HGET user:1001 name  // 返回 &amp;#34;lisi&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HGETALL user:1001 // 返回 name &amp;#34;lisi&amp;#34; age &amp;#34;30&amp;#34; email &amp;#34;lisi@example.com&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HSET product:laptop brand &amp;#34;Dell&amp;#34; model &amp;#34;XPS 15&amp;#34; price 12000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HGET product:laptop price // 返回 &amp;#34;12000&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;3-列表-list&#34;&gt;3. 列表 (List)
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;列表 (List)&lt;/strong&gt; 类型是一个有序的字符串集合，可以从列表的两端添加或删除元素。你可以把它想象成一个双向链表，或者 Java 中的 &lt;code&gt;LinkedList&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;理解：&lt;/strong&gt; List 非常适合用来实现队列、栈这样的数据结构。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用场景：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;消息队列：&lt;/strong&gt; 实现生产者-消费者模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最新文章列表：&lt;/strong&gt; 存储网站的最新发布的文章 ID。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;朋友圈时间线：&lt;/strong&gt; 存储用户发布的朋友圈内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;常用命令：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LPUSH key value1 [value2...]&lt;/code&gt;：将一个或多个值插入到列表的头部。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RPUSH key value1 [value2...]&lt;/code&gt;：将一个或多个值插入到列表的尾部。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LPOP key&lt;/code&gt;：移除并返回列表的第一个元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RPOP key&lt;/code&gt;：移除并返回列表的最后一个元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LRANGE key start stop&lt;/code&gt;：获取列表中指定范围内的元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LLEN key&lt;/code&gt;：获取列表的长度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;LPUSH mylist &amp;#34;apple&amp;#34; &amp;#34;banana&amp;#34; &amp;#34;orange&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;LRANGE mylist 0 -1 // 返回 &amp;#34;orange&amp;#34;, &amp;#34;banana&amp;#34;, &amp;#34;apple&amp;#34; (从左到右)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;RPUSH tasks &amp;#34;task1&amp;#34; &amp;#34;task2&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;LPOP tasks // 返回 &amp;#34;task1&amp;#34; (模拟队列消费)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;4-集合-set&#34;&gt;4. 集合 (Set)
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;集合 (Set)&lt;/strong&gt; 类型是一个无序的字符串集合，每个元素都是唯一的，不允许重复。它类似于 Java 中的 &lt;code&gt;HashSet&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;理解：&lt;/strong&gt; Set 主要用于存储不重复的数据，并能进行集合间的运算（交集、并集、差集）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用场景：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;标签系统：&lt;/strong&gt; 存储文章的标签。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;共同关注/共同好友：&lt;/strong&gt; 计算两个用户之间的共同关注。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;抽奖活动：&lt;/strong&gt; 存储参与抽奖的用户 ID，确保不重复。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;常用命令：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SADD key member1 [member2...]&lt;/code&gt;：向集合中添加一个或多个成员。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SMEMBERS key&lt;/code&gt;：获取集合中的所有成员。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SISMEMBER key member&lt;/code&gt;：判断成员是否是集合的成员。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SREM key member1 [member2...]&lt;/code&gt;：移除集合中的一个或多个成员。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SINTER key1 [key2...]&lt;/code&gt;：返回给定所有集合的交集。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SUNION key1 [key2...]&lt;/code&gt;：返回给定所有集合的并集。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SDIFF key1 [key2...]&lt;/code&gt;：返回给定所有集合的差集。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SADD tags &amp;#34;Java&amp;#34; &amp;#34;Spring&amp;#34; &amp;#34;Redis&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SMEMBERS tags // 返回 &amp;#34;Java&amp;#34;, &amp;#34;Spring&amp;#34;, &amp;#34;Redis&amp;#34; (无序)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SADD user:1:friends &amp;#34;user2&amp;#34; &amp;#34;user3&amp;#34; &amp;#34;user4&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SADD user:2:friends &amp;#34;user3&amp;#34; &amp;#34;user4&amp;#34; &amp;#34;user5&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SINTER user:1:friends user:2:friends // 返回 &amp;#34;user3&amp;#34;, &amp;#34;user4&amp;#34; (共同好友)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;5-有序集合-sorted-set--zset&#34;&gt;5. 有序集合 (Sorted Set / ZSet)
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;有序集合 (Sorted Set / ZSet)&lt;/strong&gt; 类型和 Set 类似，也是字符串的集合，且每个元素都是唯一的。不同之处在于，有序集合的每个成员都会关联一个 &lt;strong&gt;分数 (score)&lt;/strong&gt;，Redis 会根据分数对集合中的成员进行排序。分数可以是小数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;理解：&lt;/strong&gt; ZSet 可以看作是 Set 和 Hash 的结合，既保证元素的唯一性，又能根据分数进行排序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用场景：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;排行榜：&lt;/strong&gt; 游戏积分排行榜、销售排行榜等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最新热点：&lt;/strong&gt; 根据时间戳或热度分数排序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;带有权重的任务队列：&lt;/strong&gt; 根据任务的优先级进行处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;常用命令：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ZADD key score member1 [score member2...]&lt;/code&gt;：向有序集合中添加一个或多个成员，或者更新已存在成员的分数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ZRANGE key start stop [WITHSCORES]&lt;/code&gt;：通过索引区间返回有序集合指定区间内的成员。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ZREVRANGE key start stop [WITHSCORES]&lt;/code&gt;：通过索引区间返回有序集合中指定区间内的成员，分数从大到小。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ZSCORE key member&lt;/code&gt;：获取有序集合中指定成员的分数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ZREM key member1 [member2...]&lt;/code&gt;：移除有序集合中的一个或多个成员。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ZADD leaderboard 95 &amp;#34;Alice&amp;#34; 88 &amp;#34;Bob&amp;#34; 92 &amp;#34;Charlie&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ZRANGE leaderboard 0 -1 WITHSCORES // 返回 &amp;#34;Bob&amp;#34; 88, &amp;#34;Charlie&amp;#34; 92, &amp;#34;Alice&amp;#34; 95 (分数从小到大)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ZREVRANGE leaderboard 0 1 WITHSCORES // 返回 &amp;#34;Alice&amp;#34; 95, &amp;#34;Charlie&amp;#34; 92 (分数从大到小，取前两名)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ZADD product:sales 1000 &amp;#34;iPhone&amp;#34; 800 &amp;#34;iPad&amp;#34; 1200 &amp;#34;MacBook&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ZREVRANGE product:sales 0 0 WITHSCORES // 返回 &amp;#34;MacBook&amp;#34; 1200 (销量最高的产品)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;如何在-spring-boot-中使用-redis&#34;&gt;如何在 Spring Boot 中使用 Redis？
&lt;/h3&gt;&lt;p&gt;在 Spring Boot 中集成 Redis 非常方便，通常会使用 &lt;code&gt;spring-boot-starter-data-redis&lt;/code&gt; 依赖。它提供了对 Jedis 或 Lettuce 客户端的自动配置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 添加依赖：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;pom.xml&lt;/code&gt; 中添加如下依赖：&lt;/p&gt;
&lt;p&gt;XML&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;dependency&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;artifactId&amp;gt;spring-boot-starter-data-redis&amp;lt;/artifactId&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/dependency&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;2. 配置 Redis 连接：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;application.properties&lt;/code&gt; 或 &lt;code&gt;application.yml&lt;/code&gt; 中配置 Redis 连接信息：&lt;/p&gt;
&lt;p&gt;Properties&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# application.properties
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spring.data.redis.host=localhost
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spring.data.redis.port=6379
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# spring.data.redis.password=your_password (如果有密码的话)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;3. 使用 &lt;code&gt;RedisTemplate&lt;/code&gt; 或 &lt;code&gt;StringRedisTemplate&lt;/code&gt;：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spring Boot 会自动配置 &lt;code&gt;RedisTemplate&lt;/code&gt; 和 &lt;code&gt;StringRedisTemplate&lt;/code&gt;。你可以直接在你的服务类中注入它们来操作 Redis。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;RedisTemplate&amp;lt;K, V&amp;gt;&lt;/code&gt;：&lt;/strong&gt; 默认使用 JDK 序列化，可以操作各种 Java 对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;StringRedisTemplate&lt;/code&gt;：&lt;/strong&gt; &lt;code&gt;RedisTemplate&lt;/code&gt; 的子类，专门用于操作字符串类型，键和值都使用 &lt;code&gt;StringRedisSerializer&lt;/code&gt; 进行序列化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import org.springframework.data.redis.core.RedisTemplate;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import org.springframework.data.redis.core.StringRedisTemplate;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import org.springframework.stereotype.Service;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@Service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;public class UserService {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    @Autowired
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    private StringRedisTemplate stringRedisTemplate; // 用于操作字符串
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    @Autowired
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    private RedisTemplate&amp;lt;Object, Object&amp;gt; redisTemplate; // 用于操作Java对象
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    public void saveUser(String userId, String username) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        stringRedisTemplate.opsForValue().set(&amp;#34;user:&amp;#34; + userId + &amp;#34;:name&amp;#34;, username);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    public String getUserName(String userId) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        return stringRedisTemplate.opsForValue().get(&amp;#34;user:&amp;#34; + userId + &amp;#34;:name&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    public void incrementPageViews(String articleId) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        stringRedisTemplate.opsForValue().increment(&amp;#34;article:&amp;#34; + articleId + &amp;#34;:views&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    public void addUserToRanking(String username, double score) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        redisTemplate.opsForZSet().add(&amp;#34;game:ranking&amp;#34;, username, score);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
